importar { format, subDays, addDays, isBefore como esAntes, parse } desde 'date-fns'
importar { escribirRuta, leerRuta } desde '@/utils/rutas.esjs'
importar { extraerRiesgoPais } desde '@/finanzas/riesgoPais/extraerRiesgoPais.esjs'
importar collect desde 'collect.js'

exportar porDefecto asincrono funcion () {
  const valoresExtraidos = collect(
    esperar extraerRiesgoPais(subDays(crear Fecha(), 10), crear Fecha()),
  )
    .sortBy('fecha')
    .toArray()

  const ultimoValor = valoresExtraidos[valoresExtraidos.longitud - 1]

  const rutasGuardadas = [
    esperar guardarUltimo(ultimoValor),
    esperar guardarHistorico(valoresExtraidos),
  ]

  retornar rutasGuardadas
}

asincrono funcion guardarUltimo(ultimoRiesgoPais, fecha) {
  const ruta = '/finanzas/indices/riesgo-pais/ultimo'

  esperar escribirRuta(ruta, ultimoRiesgoPais)

  retornar ruta
}

asincrono funcion guardarHistorico(valores) {
  const ruta = '/finanzas/indices/riesgo-pais'

  const historico = esperar leerRuta(ruta)

  const nuevoHistorico = collect(
    historico.mapear(item => {
      const nuevoValor = valores.buscar(v => v.fecha === item.fecha)

      si (nuevoValor) {
        retornar {
          valor: nuevoValor.valor,
          fecha: item.fecha,
        }
      }

      retornar item
    }),
  )
    .merge(valores.filtrar(v => !historico.algun(h => h.fecha === v.fecha)))
    .sortBy('fecha')
    .toArray()

  esperar escribirRuta(ruta, nuevoHistorico)

  retornar ruta
}
