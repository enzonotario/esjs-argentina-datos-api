importar { escribirRuta, leerRuta } desde '@/utils/rutas.esjs'
importar { format } desde 'date-fns'
importar { logGrupo, logError, logMensaje } desde '@/log.esjs'

exportar asincrono funcion extraerCarrefourCuentaRemunerada() {
  const log = logGrupo({
    fuente: 'extraerCarrefour',
    tipo: 'cuentaRemunerada',
  })

  intentar {
    const respuesta = esperar fetch(import.meta.env.VITE_CARREFOUR_API_URL, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    })

    si (!respuesta.ok) {
      logMensaje(log, 'Respuesta no OK de Carrefour API', {
        status: respuesta.status,
        statusText: respuesta.statusText,
      })
      lanzar crear Error(
        `Error en la solicitud a Carrefour API: ${respuesta.status} ${respuesta.statusText}`,
      )
    }

    const datos = esperar respuesta.json()

    si (
      !datos ||
      datos.data === nulo ||
      datos.data.tna === nulo ||
      datos.data.tna === indefinido
    ) {
      logMensaje(log, 'Datos inválidos de Carrefour API', { datos })
      lanzar crear Error('Error en la respuesta de Carrefour API')
    }

    const valor = Numero(datos.data.tna)

    si (valor === nulo || isNaN(valor)) {
      lanzar crear Error('No se encontró el valor de la cuenta remunerada')
    }

    const tna = Numero(valor.fijarDecimales(4))

    const tea = Numero(((1 + tna / 365) ** 365 - 1).fijarDecimales(4))

    retornar {
      fondo: 'CARREFOUR',
      tna,
      tea,
      tope: datos.data.tope || nulo,
      fecha: format(crear Fecha(), 'yyyy-MM-dd'),
    };
  } capturar (error) {
    logError(log, error)
    retornar []
  }
}
