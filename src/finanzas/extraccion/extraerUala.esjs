importar { format } desde 'date-fns'
importar { escribirRuta, leerRuta } desde '@/utils/rutas.esjs'
importar axios desde 'axios'
importar { logGrupo, logError, logMensaje } desde '@/log.esjs'
importar { interpretarDecimalConComa } desde '@/utils/numeros.esjs'

mut respuestaGuardada = nulo

exportar asincrono funcion extraerUalaCuentaRemunerada() {
  const log = logGrupo({ fuente: 'extraerUala', tipo: 'cuentaRemunerada' })

  intentar {
    const respuesta = esperar fetch(
      'https://api.comparatasas.ar/cuentas-remuneradas',
    )

    const lista = esperar respuesta.json()

    const cuentaRemunerada = lista.buscar(cuenta => cuenta.nombre === 'Ualá')

    si (cuentaRemunerada === nulo) {
      lanzar crear Error('No se encontró la cuenta remunerada')
    }

    const valor = Numero(cuentaRemunerada.tna)

    si (valor === nulo) {
      lanzar crear Error('No se encontró el valor de la cuenta remunerada')
    }

    const tna = Numero((valor / 100).fijarDecimales(4))

    const tea = Numero(((1 + tna / 365) ** 365 - 1).fijarDecimales(4))

    retornar {
      fondo: 'UALA',
      tna,
      tea,
      tope: cuentaRemunerada.limite,
      fecha: format(crear Fecha(), 'yyyy-MM-dd'),
    };
  } capturar (error) {
    logError(log, error)
    retornar []
  }
}

exportar asincrono funcion extraerUalaPlazoFijo() {
  const log = logGrupo({ fuente: 'extraerUala', tipo: 'plazoFijo' })

  intentar {
    const enlace = 'https://www.uala.com.ar/inversiones/plazo-fijo'

    const respuesta = esperar fetch(enlace)

    si (!respuesta.ok) {
      lanzar crear Error(
        `Error al obtener la página de Ualá: ${respuesta.statusText}`,
      )
    }

    const htmlText = esperar respuesta.text()

    const tnaRegex = /TNA\s+30\s+días:\s+(\d+[.,]\d+)%/i
    const coincidencias = htmlText.coincidir(tnaRegex)

    si (!coincidencias || !coincidencias[1]) {
      logMensaje(log, 'No se encontró la tasa TNA en la página de Ualá', {
        htmlText,
      })
      lanzar crear Error('No se pudo encontrar la tasa TNA en la página de Ualá')
    }

    const tna = interpretarDecimalConComa(coincidencias[1]) / 100

    retornar {
      entidad: 'UALA',
      logo: 'https://icons.com.ar/icons/bancos-apps/uala.svg',
      tnaClientes: tna,
      tnaNoClientes: tna,
      enlace,
    }
  } capturar (error) {
    logError(log, error)
    retornar []
  }
}

asincrono funcion obtenerRespuesta() {
  si (respuestaGuardada) {
    retornar respuestaGuardada
  }

  intentar {
    const solicitarToken = esperar axios.post(
      import.meta.env.VITE_FINANZAS_RENDIMIENTOS_UALA_TOKEN_URL,
      {
        username: import.meta.env.VITE_FINANZAS_RENDIMIENTOS_UALA_USERNAME,
        password: import.meta.env.VITE_FINANZAS_RENDIMIENTOS_UALA_PASSWORD,
      },
      {
        headers: {
          'Content-Type': 'application/json',
        },
      },
    )

    const token = solicitarToken.data.access

    respuestaGuardada = esperar axios.get(
      import.meta.env.VITE_FINANZAS_RENDIMIENTOS_UALA_URL,
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      },
    )

    retornar respuestaGuardada
  } capturar (error) {
    consola.error('Error al obtener respuesta de Uala', error.aCadena())
    retornar {}
  }
}
