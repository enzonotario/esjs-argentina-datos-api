importar { format } desde 'date-fns'
importar { escribirRuta, leerRuta } desde '@/utils/rutas.esjs'
importar axios desde 'axios'
importar { logGrupo, logError, logMensaje } desde '@/log.esjs'
importar { interpretarDecimalConComa } desde '@/utils/numeros.esjs'

const FIRECRAWL_API_URL = `${import.meta.env.VITE_FIRECRAWL_BASE_URL}/v2/scrape`

exportar asincrono funcion extraerUalaCuentaRemunerada() {
  const log = logGrupo({
    fuente: 'extraerUala',
    tipo: 'cuentaRemunerada',
  })

  intentar {
    const respuesta = esperar fetch(FIRECRAWL_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.aTexto({
        url: 'https://www.uala.com.ar/inversiones/cuenta-remunerada',
        onlyMainContent: verdadero,
        maxAge: 0, // no cache
        formats: [
          'markdown',
          {
            type: 'json',
            prompt: 'Extrae las tasas de las cuentas remuneradas Normal y Plus. En condicionesCorto asegúrate de que quede claro que monto se debe consumir para acceder a la cuenta Plus. Por ejemplo: [ { "fondo": "UALA", "tna": 0.4, "tope": 1500000, "fecha": "2025-09-19" }, { "fondo": "UALA PLUS", "tna": 0.45, "tope": 1500000, "condiciones": "Si acumulás $500.000 o más entre ciertas operaciones este mes, el próximo tu tasa sube 5%", "condicionesCorto": "Acumulá $500.000 entre inversiones y consumos", "fecha": "2025-09-19" } ]',
            schema: {
              type: 'object',
              required: ['cuentaRemuneradaNormal', 'cuentaRemuneradaPlus'],
              properties: {
                cuentaRemuneradaNormal: {
                  type: 'object',
                  required: ['tna', 'tope'],
                  properties: {
                    tna: { type: 'number' },
                    tope: { type: 'number' },
                  },
                },
                cuentaRemuneradaPlus: {
                  type: 'object',
                  required: ['tna', 'tope'],
                  properties: {
                    tna: { type: 'number' },
                    tope: { type: 'number' },
                    condiciones: { type: 'string' },
                    condicionesCorto: { type: 'string', maxLength: 100 },
                  },
                },
              },
            },
          },
        ],
      }),
    })

    si (!respuesta.ok) {
      logMensaje(log, 'Respuesta no OK de Firecrawl', {
        status: respuesta.status,
        statusText: respuesta.statusText,
      })
      lanzar crear Error(
        `Error en la solicitud a Firecrawl: ${respuesta.status} ${respuesta.statusText}`,
      )
    }

    const datos = esperar respuesta.json()

    si (
      !datos.success ||
      !datos.data ||
      !datos.data.json ||
      !datos.data.json.cuentaRemuneradaNormal ||
      datos.data.json.cuentaRemuneradaNormal.tna === nulo ||
      !datos.data.json.cuentaRemuneradaPlus ||
      datos.data.json.cuentaRemuneradaPlus.tna === nulo
    ) {
      logMensaje(log, 'Datos inválidos de Firecrawl', { datos })
      lanzar crear Error('Error en la respuesta de Firecrawl')
    }

    const valor = Numero(datos.data.json.cuentaRemuneradaNormal.tna)

    si (valor === nulo) {
      lanzar crear Error('No se encontró el valor de la cuenta remunerada')
    }

    retornar [
      {
        fondo: 'UALA',
        tna: Numero((datos.data.json.cuentaRemuneradaNormal.tna).fijarDecimales(4)),
        tea: Numero(((1 + datos.data.json.cuentaRemuneradaNormal.tna / 365) **
          365 - 1).fijarDecimales(4)),
        tope: datos.data.json.cuentaRemuneradaNormal.tope,
        fecha: format(crear Fecha(), 'yyyy-MM-dd'),
      },
      {
        fondo: 'UALA PLUS',
        tna: Numero((datos.data.json.cuentaRemuneradaPlus.tna).fijarDecimales(4)),
        tea: Numero(((1 + datos.data.json.cuentaRemuneradaPlus.tna / 365) ** 365 - 1).fijarDecimales(4)),
        tope: datos.data.json.cuentaRemuneradaPlus.tope,
        condiciones: datos.data.json.cuentaRemuneradaPlus.condiciones,
        condicionesCorto: datos.data.json.cuentaRemuneradaPlus.condicionesCorto,
        fecha: format(crear Fecha(), 'yyyy-MM-dd'),
      },
    ];
  } capturar (error) {
    logError(log, error)
    retornar []
  }
}

exportar asincrono funcion extraerUalaPlazoFijo() {
  const log = logGrupo({ fuente: 'extraerUala', tipo: 'plazoFijo' })

  intentar {
    const enlace = 'https://www.uala.com.ar/inversiones/plazo-fijo'

    const respuesta = esperar fetch(enlace)

    si (!respuesta.ok) {
      lanzar crear Error(
        `Error al obtener la página de Ualá: ${respuesta.statusText}`,
      )
    }

    const htmlText = esperar respuesta.text()

    const tnaRegex = /TNA\s+30\s+días:\s+(\d+[.,]\d+)%/i
    const coincidencias = htmlText.coincidir(tnaRegex)

    si (!coincidencias || !coincidencias[1]) {
      logMensaje(log, 'No se encontró la tasa TNA en la página de Ualá', {
        htmlText,
      })
      lanzar crear Error('No se pudo encontrar la tasa TNA en la página de Ualá')
    }

    const tna = interpretarDecimalConComa(coincidencias[1]) / 100

    retornar {
      entidad: 'UALA',
      logo: 'https://icons.com.ar/icons/bancos-apps/uala.svg',
      tnaClientes: tna,
      tnaNoClientes: tna,
      enlace,
    }
  } capturar (error) {
    logError(log, error)
    retornar []
  }
}
