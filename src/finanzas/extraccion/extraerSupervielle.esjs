importar { escribirRuta, leerRuta } desde '@/utils/rutas.esjs'
importar { format } desde 'date-fns'
importar { logGrupo, logError, logMensaje } desde '@/log.esjs'

const FIRECRAWL_API_URL = `${import.meta.env.VITE_FIRECRAWL_BASE_URL}/v2/scrape`

exportar asincrono funcion extraerSupervielleCuentaRemunerada() {
  const log = logGrupo({
    fuente: 'extraerSupervielle',
    tipo: 'cuentaRemunerada',
  })

  intentar {
    const respuesta = esperar fetch(FIRECRAWL_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.aTexto({
        url: 'https://www.supervielle.com.ar/personas/cuentas/cuenta-remunerada',
        onlyMainContent: verdadero,
        maxAge: 0, // no cache
        formats: [
          'markdown',
          {
            type: 'json',
            prompt: 'Extrae la tasa de la cuenta remunerada de Supervielle en formato JSON. Para la TNA usa números decimales (por ejemplo 0.75 para 75%).',
            schema: {
              type: 'object',
              required: ['tna', 'tope'],
              properties: {
                tna: {
                  type: 'number',
                },
                tope: {
                  type: 'number',
                },
              },
            },
          },
        ],
      }),
    })

    si (!respuesta.ok) {
      logMensaje(log, 'Respuesta no OK de Firecrawl', {
        status: respuesta.status,
        statusText: respuesta.statusText,
      })
      lanzar crear Error(
        `Error en la solicitud a Firecrawl: ${respuesta.status} ${respuesta.statusText}`,
      )
    }

    const datos = esperar respuesta.json()

    si (
      !datos.success ||
      !datos.data ||
      !datos.data.json ||
      datos.data.json.tna === nulo
    ) {
      logMensaje(log, 'Datos inválidos de Firecrawl', { datos })
      lanzar crear Error('Error en la respuesta de Firecrawl')
    }

    const valor = Numero(datos.data.json.tna)

    si (valor === nulo) {
      lanzar crear Error('No se encontró el valor de la cuenta remunerada')
    }

    const tna = Numero((valor).fijarDecimales(4))

    const tea = Numero(((1 + tna / 365) ** 365 - 1).fijarDecimales(4))

    retornar {
      fondo: 'SUPERVIELLE',
      tna,
      tea,
      tope: datos.data.json.tope,
      fecha: format(crear Fecha(), 'yyyy-MM-dd'),
      condiciones: nulo,
      condicionesCorto: 'Solo Clientes Plan Sueldo.',
    };
  } capturar (error) {
    logError(log, error)
    retornar []
  }
}
